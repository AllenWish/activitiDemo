Activiti给我们提供了接口，可以返回一个资源文件输入流，然后我们可以得到一张图片，存到本地服务器，然后我们可以通过图片路径在网页上显示，
来实现管理员查询流程定义图片的功能；
我们代码里用到了apache的commons包里的FileUtils类


前面讲了流程定义的添加，查询，删除。至于这个修改；我们今天来讨论下；
首先说下结论，流程定义是不能修改的；
这里举例子，假如一个流程定义的流程实例在活动运行中。假如可以修改，
本来要流转到A这个节点，因为流程定义修改了，流转到B这个节点。就不符合当时这个流程实例的初衷了；
所以一般开发的话，不能修改流程定义，我们是通过增加版本号的方式。来实现“修改”的；
在设计流程图的时候，这里的Id 对应到数据库里的就是那个Key值  只要Id相同。就算是同一个流程定义；
比如我们可以发布多次，Id一样，到数据库表那边 Key作为版本属性 值会增加；
我们一般启动流程实例的时候，我们用Key来启动。这样启动的时候 就是用的最新版本的流程定义来启动流程实例的；
假如用流程定义Id来启动 很不推荐；
这里顺便再说下流程定义的Id；
这个Id值组成的话 是 key值:版本号:流程部署ID；


因为每个流程定义都可能会有好几个版本，所以有时候我们有这样的需求，查询出最新版本的流程定义的集合；
怎么来实现呢？ 我们一般的思路是这样的。
第一步：我们通过Activiti接口来获取根据流程定义Version升序排序的流程定义的集合；
第二步：定义一个有序的Map， Map的key就是我们流程定义的Key，Map的值就是流程定义对象；
第三步：我们遍历第一步的集合，put(key,value)  假如Key相同，后者会覆盖前者；
第四步：我们获取Map的values。即我们需要的最新版本的流程定义的集合；


有时候我们一个流程定义不需要的，包括所有版本，这时候我们在用户界面上一个一个删除太麻烦；
所有有时候我们又这样的需求，一下子把所有Key相同的流程定义全部删除；
我们的思路是这样的；
第一步：根据Key获取所有的流程定义；
第二步：遍历集合，获取每个流程定义的流程部署Id
第三步：我们根据流程部署Id即可删除所有的流程定义；

Activiti 查询流程实例状态:act_ru_execution
这时候我们可以用流程实例Id去运行时执行表去查，假如能查到数据，说明流程实例还是运行，假如没查到，就说明这个流程实例已经运行结束了；act_ru_execution

实际工作流项目中，有一个功能叫做 历史任务查询。act_hi_taskinst
当然这个表的话，不管是已经完结的任务 还是正在执行的任务，都会记录下这个表里。Activiti给我们提供了一个接口 finished；
加了之后 就是查询已经完结的任务； 同理还有一个接口unfinished 顾名思义，就是查询未完结的任务；当然这两个都不加，就是把所有任务都查询出来；

查询历史流程实例:其实本质就是查询历史流程实例表；act_hi_procinst
这里有一点说下 这个表的id和流程实例id始终是一样的。所以Activiti没有提供获取流程实例id的接口；
因为直接getId()获取的值和流程实例Id是一样的；


 关键对象
1.      Deployment：流程部署对象，部署一个流程时创建。
2.      ProcessDefinitions：流程定义，部署成功后自动创建。
3.      ProcessInstances：流程实例，启动流程时创建。 
4.      Task：任务，在Activiti中的Task仅指有角色参与的任务，即定义中的UserTask。 
5.      Execution：执行计划，流程实例和流程执行中的所有节点都是Execution，如UserTask、ServiceTask等。
服务接口
1.      ProcessEngine：流程引擎的抽象，通过它我们可以获得我们需要的一切服务。 
2.      RepositoryService：Activiti中每一个不同版本的业务流程的定义都需要使用一些定义文件，部署文件和支持数据(例如BPMN2.0 XML文件，表单定义文件，流程定义图像文件等)，这些文件都存储在Activiti内建的Repository中。RepositoryService提供了对 repository的存取服务。
3.      RuntimeService：在Activiti中，每当一个流程定义被启动一次之后，都会生成一个相应的流程对象实例。RuntimeService提供了启动流程、查询流程实例、设置获取流程实例变量等功能。此外它还提供了对流程部署，流程定义和流程实例的存取服务。
4.      TaskService: 在Activiti中业务流程定义中的每一个执行节点被称为一个Task，对流程中的数据存取，状态变更等操作均需要在Task中完成。TaskService提供了对用户Task 和Form相关的操作。它提供了运行时任务查询、领取、完成、删除以及变量设置等功能。 
5.      IdentityService: Activiti中内置了用户以及组管理的功能，必须使用这些用户和组的信息才能获取到相应的Task。IdentityService提供了对Activiti 系统中的用户和组的管理功能。
6.      ManagementService: ManagementService提供了对Activiti流程引擎的管理和维护功能，这些功能不在工作流驱动的应用程序中使用，主要用于Activiti系统的日常维护。 
7.      HistoryService: HistoryService用于获取正在运行或已经完成的流程实例的信息，与RuntimeService中获取的流程信息不同，历史信息包含已经持久化存储的永久信息，并已经被针对查询优化。
